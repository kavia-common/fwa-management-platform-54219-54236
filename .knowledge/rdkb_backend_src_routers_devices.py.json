{"is_source_file": true, "format": "Python", "description": "This file defines API endpoints for managing devices in a FastAPI application, including creating, listing, retrieving, updating, and deleting device records. It uses SQLAlchemy ORM models, Pydantic schemas, and dependency injection for database sessions and user authentication.", "external_files": ["src.core.database", "src.dependencies.auth", "src.models.models", "src.schemas.common"], "external_methods": ["get_db", "get_current_user", "_to_device_out"], "published": ["create_device", "list_devices", "get_device", "update_device", "delete_device"], "classes": [], "methods": [{"name": "DeviceOut create_device(payload: DeviceCreate, db: Session = Depends(get_db), _: User = Depends(get_current_user))", "description": "Registers a new device in the database, raising an HTTP error if a device with the same serial number already exists.", "scope": "", "scopeKind": ""}, {"name": "List[DeviceOut] list_devices(status: str | None = Query(default=None, description=\"Filter by status\"), db: Session = Depends(get_db), _: User = Depends(get_current_user))", "description": "Returns a list of all devices, optionally filtered by status.", "scope": "", "scopeKind": ""}, {"name": "DeviceOut get_device(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_user))", "description": "Retrieves a single device by its ID, raising an HTTP 404 error if not found.", "scope": "", "scopeKind": ""}, {"name": "DeviceOut update_device(device_id: int, payload: DeviceUpdate, db: Session = Depends(get_db), _: User = Depends(get_current_user))", "description": "Updates fields of an existing device; if status is set to 'online', updates last_seen timestamp.", "scope": "", "scopeKind": ""}, {"name": "None delete_device(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_user))", "description": "Deletes a device by its ID.", "scope": "", "scopeKind": ""}, {"name": "DeviceOut _to_device_out(d: Device)", "description": "Helper function to convert a Device ORM object into a DeviceOut schema.", "scope": "", "scopeKind": ""}], "calls": ["get_db", "get_current_user", "_to_device_out", "db.query", "db.get", "db.add", "db.commit", "db.refresh", "db.delete", "datetime.utcnow"], "search-terms": ["devices API", "Device management", "FastAPI devices router", "Device CRUD endpoints", "Device ORM conversion"], "state": 2, "file_id": 14, "knowledge_revision": 29, "git_revision": "", "ctags": [{"_type": "tag", "name": "_to_device_out", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def _to_device_out(d: Device) -> DeviceOut:$/", "language": "Python", "typeref": "typename:DeviceOut", "kind": "function", "signature": "(d: Device)"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def create_device(payload: DeviceCreate, db: Session = Depends(get_db), _: User = Depends(get_cu/", "language": "Python", "typeref": "typename:DeviceOut", "kind": "function", "signature": "(payload: DeviceCreate, db: Session = Depends(get_db), _: User = Depends(get_current_user))"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def delete_device(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_u/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_user))"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def get_device(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_user/", "language": "Python", "typeref": "typename:DeviceOut", "kind": "function", "signature": "(device_id: int, db: Session = Depends(get_db), _: User = Depends(get_current_user))"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def list_devices(status: str | None = Query(default=None, description=\"Filter by status\"), db: S/", "language": "Python", "typeref": "typename:List[DeviceOut]", "kind": "function", "signature": "(status: str | None = Query(default=None, description=\"Filter by status\"), db: Session = Depends(get_db), _: User = Depends(get_current_user))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^router = APIRouter(prefix=\"\\/devices\", tags=[\"Devices\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/fwa-management-platform-54219-54236/rdkb_backend/src/routers/devices.py", "pattern": "/^def update_device(device_id: int, payload: DeviceUpdate, db: Session = Depends(get_db), _: User /", "language": "Python", "typeref": "typename:DeviceOut", "kind": "function", "signature": "(device_id: int, payload: DeviceUpdate, db: Session = Depends(get_db), _: User = Depends(get_current_user))"}], "hash": "cb1b4a3a6a2aa05fa0d6cc2c17dbc47e", "format-version": 4, "code-base-name": "rdkb_backend", "filename": "rdkb_backend/src/routers/devices.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/devices\", tags=[\"Devices\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"29": ""}]}